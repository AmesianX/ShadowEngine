unit uMainModel;

interface

uses
  FMX.Graphics, FMX.Types, System.Classes, System.Types, System.Generics.Collections,
  System.JSON,
  uMVPFrameWork, uSSBModels, uStreamUtil;

type
  TSSBModel = class(TModel)
  private
    FBitmap: TBitmap; // Подложка объекта
    FResources: TList<TResourceModel>;
    FObjects: TList<TObjectModel>;
    FImageElements: TList<TItemImageModel>;
    FImageFileName: string;
    FResourceFileName: string;
    function GetElementCount: Integer;
    function GetResource(AIndex: Integer): TResourceModel;
    function GetImageElement(AIndex: Integer): TItemImageModel;
    function GetImageElementCount: Integer;
    procedure SetResource(AIndex: Integer; const Value: TResourceModel);
    procedure SetImageElement(AIndex: Integer; const Value: TItemImageModel);
    procedure OnUpdateItemObject(Sender: TObject);
    procedure OnUpdateImageObject(Sender: TObject);
    procedure OnUpdateShapeObject(Sender: TObject);
    procedure SetResourceFileName(const Value: string);
    function GetObject(AIndex: Integer): TObjectModel;
    procedure SetObject(AIndex: Integer; const Value: TObjectModel);
    procedure SetImageFileName(const Value: string);
  protected
    // Image Elements are in protected, because they stored only for project files. SO Engine doesn't know about them
    property ImageElements[AIndex: Integer]: TItemImageModel read GetImageElement write SetImageElement;
    property ImageElementCount: Integer read GetImageElementCount;
  public
    function ToJson: string;
    procedure FromJson(const AJson: string);
    procedure SaveProjectToStream(const AStream: TStreamUtil);

    property ImageFileName: string read FImageFileName write SetImageFileName; // Name of image that would be created

    property ResourceItems[AIndex: Integer]: TResourceModel read GetResource write SetResource;
    property ObjectsItems[AIndex: Integer]: TObjectModel read GetObject write SetObject;
    property ResourceCount: Integer read GetElementCount;

    function GenerateWholeBitmap: TBitmap;

    function AddResource: TResourceModel;
    procedure RemoveResource(const AElement: TResourceModel);
    function AddImageElement: TItemImageModel;
    procedure RemoveImage(const AImageElement: TItemImageModel);

    constructor Create(const AUpdateHandler: TNotifyEvent); override;
    destructor Destroy; override;
end;

implementation

{ TSSBModel }

function TSSBModel.AddResource: TResourceModel;
var
  vModel: TResourceModel;
begin
  vModel := TResourceModel.Create(OnUpdateItemObject);
  FResources.Add(vModel);
  Result := vModel;
  RaiseUpdateEvent;
end;

function TSSBModel.AddImageElement: TItemImageModel;
var
  vModel: TItemImageModel;
begin
  vModel := TItemImageModel.Create(OnUpdateImageObject);
  FImageElements.Add(vModel);
  RaiseUpdateEvent;
  Result := vModel;
end;

constructor TSSBModel.Create(const AUpdateHandler: TNotifyEvent);
begin
  inherited;

  FBitmap := TBitmap.Create;
  FResources := TList<TResourceModel>.Create;
  FObjects := TList<TObjectModel>.Create;
  FImageElements := TList<TItemImageModel>.Create;
  FImageFileName := 'SSBAutoGeneratedImage.png';
end;

procedure TSSBModel.RemoveResource(const AElement: TResourceModel);
begin
  FResources.Remove(AElement);
  AElement.Free;
  RaiseUpdateEvent;
end;

procedure TSSBModel.RemoveImage(const AImageElement: TItemImageModel);
begin
  FImageElements.Remove(AImageElement);
  AImageElement.Free;
  RaiseUpdateEvent;
end;

destructor TSSBModel.Destroy;
var
  i: Integer;
begin
  FBitmap.Free;

  for i := 0 to FResources.Count - 1 do
    FResources[i].Free;
  FResources.Free;

  for i := 0 to FObjects.Count - 1 do
    FObjects[i].Free;
  FObjects.Free;

  for i := 0 to FImageElements.Count - 1 do
    FImageElements[i].Free;
  FImageElements.Free;
end;

procedure TSSBModel.FromJson(const AJson: string);
begin

end;

function TSSBModel.GenerateWholeBitmap: TBitmap;
var
  vItem: TItemImageModel;
  vRight: TPoint;
  vBmp: TBitmap;
  vRect: TRectF;
begin
  vRight := TPoint.Zero;
  for vItem in FImageElements do
  begin
    if (vItem.Position.X + vItem.Width) > vRight.X then
      vRight.X := (vItem.Position.X + vItem.Width);
    if (vItem.Position.Y + vItem.Height) > vRight.Y then
      vRight.Y := (vItem.Position.Y + vItem.Height);
  end;

  vBmp := TBitmap.Create(vRight.X, vRight.Y);
  for vItem in FImageElements do
  begin
    vRect := RectF(vItem.Rect.Left, vItem.Rect.Top, vItem.Rect.Right, vItem.Rect.Bottom);
    with vBmp do
    begin
      Canvas.BeginScene;
      Canvas.DrawBitmap(
        vItem.OriginalImage.Bitmap,
        RectF(0, 0, vItem.Width, vItem.Height),
        vRect, 1, False);
      Canvas.EndScene;
    end;
  end;
  REsult := vBmp;
end;

function TSSBModel.GetResource(AIndex: Integer): TResourceModel;
begin
  Result := FResources[AIndex];
end;

function TSSBModel.GetElementCount: Integer;
begin
  Result := FResources.Count;
end;

function TSSBModel.GetImageElement(AIndex: Integer): TItemImageModel;
begin
  Result := FImageElements[AIndex];
end;

function TSSBModel.GetImageElementCount: Integer;
begin
  Result := FImageElements.Count;
end;

function TSSBModel.GetObject(AIndex: Integer): TObjectModel;
begin
  Result := FObjects[AIndex];
end;

procedure TSSBModel.OnUpdateImageObject(Sender: TObject);
begin

end;

procedure TSSBModel.OnUpdateItemObject(Sender: TObject);
begin

end;

procedure TSSBModel.OnUpdateShapeObject(Sender: TObject);
begin

end;

procedure TSSBModel.SaveProjectToStream(const AStream: TStreamUtil);
var
  i: Integer;
begin
 with AStream do
  begin
    StartWrite;
    WriteStrOnly('SpriteShapeBuilderProjectFile');
    WriteStr('Version');
    WriteInt(1);
    WriteStr('Resources');
    WriteInt(ImageElementCount);
    for i := 0 to ImageElementCount - 1 do
    begin
      WriteStr('Resource');
      ImageElements[i].WriteToStream(AStream);
    end;

    WriteStr('ResourceFileName');
    WriteStr(FResourceFileName);
    WriteStr('Objects');
    WriteInt(ResourceCount);

    for i := 0 to ResourceCount - 1 do
    begin
      ResourceItems[i].WriteToStream(AStream);
    end;

    Stop;
  end;
end;

procedure TSSBModel.SetResource(AIndex: Integer; const Value: TResourceModel);
begin
  FResources[AIndex] := Value;
  RaiseUpdateEvent;
end;

procedure TSSBModel.SetImageElement(AIndex: Integer;
  const Value: TItemImageModel);
begin
  FImageElements[AIndex] := Value;
  RaiseUpdateEvent;
end;

procedure TSSBModel.SetImageFileName(const Value: string);
begin
  FImageFileName := Value;
  RaiseUpdateEvent;
end;

procedure TSSBModel.SetObject(AIndex: Integer; const Value: TObjectModel);
begin
  FObjects[AIndex] := Value;
  RaiseUpdateEvent;
end;

procedure TSSBModel.SetResourceFileName(const Value: string);
begin
  FResourceFileName := Value;
  RaiseUpdateEvent;
end;

function TSSBModel.ToJson: string;
var
  vJson: TJSONObject;
  vObjects: TJSONPair;
  vObjArr: TJSONArray;
  i: Integer;
begin
  vJson := TJSONObject.Create;
  vJson.AddPair('ImageFile', 'test.txt');
  vObjArr := TJSONArray.Create;

  for i := 0 to FResources.Count - 1 do
  begin
    vObjArr.AddElement(FResources[i].AsJson);
  end;

  vJson.AddPair('Resources', vObjArr);
  vObjArr.Free;

    vObjArr := TJSONArray.Create;

  vObjArr := TJSONArray.Create;
  for i := 0 to FObjects.Count - 1 do
  begin
    vObjArr.AddElement(FObjects[i].AsJson);
  end;

  Result := vJson.ToJSON;
end;

end.
